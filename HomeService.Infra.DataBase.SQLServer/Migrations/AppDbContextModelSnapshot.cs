// <auto-generated />
using System;
using HomeService.Infra.DataBase.SQLServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeService.Infra.DataBase.SQLServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpertService", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ExpertService");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpertId")
                        .HasColumnType("int");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId")
                        .IsUnique()
                        .HasFilter("[ExpertId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 204, DateTimeKind.Local).AddTicks(7004),
                            FirstName = "زهرا",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "سرمدی"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AdminId = 1,
                            ConcurrencyStamp = "ed2a6cbf-90a0-4510-ab64-a968de82804f",
                            Email = "Zahrasarmadi17@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZAHRASARMADI17@GMAIL.COM",
                            NormalizedUserName = "ZAHRASARMADI17@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBKbdquuh0jURNpf2D5v4VxBFOfVm5K6UB7dB45BmvtKnRmCm5UMOm4XwZSLMaL09w==",
                            PhoneNumber = "09927848276",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b7de613-0c0d-4402-9a2e-8835c4e3b38d",
                            TwoFactorEnabled = false,
                            UserName = "Zahrasarmadi17@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0b6afac-3044-4396-96dc-ff14b262eddc",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = false,
                            ExpertId = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMeEU2qC17SWb1aNPWouNIj9/oibq0Np3sdPBUhyblTBlg3Z0Mnbl58a58rwrKphLA==",
                            PhoneNumber = "09377507920",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ac827be-180c-4d43-9833-4cd4b381bec6",
                            TwoFactorEnabled = false,
                            UserName = "Ali@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a2833d6-3d2c-43d6-845e-2d09bd46ae6b",
                            CustomerId = 1,
                            Email = "Sahar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SAHAR@GMAIL.COM",
                            NormalizedUserName = "SAHAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIbxEVvCyEVBPypHXbDxbN8HDL6uQPOqSrTliHm8p0aR1WKrYY3obtjRHTrW4OFroA==",
                            PhoneNumber = "09377507920",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e71818a7-bd4c-46fa-acb3-ca060addc950",
                            TwoFactorEnabled = false,
                            UserName = "Sahar@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa2d77b4-e76a-4236-adba-b6c6e99d69b3",
                            Email = "Sara@gmail.com",
                            EmailConfirmed = false,
                            ExpertId = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@GMAIL.COM",
                            NormalizedUserName = "SARA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED2JJXxwza07o0JIYtvhBnafXmHD+23tJgbsUqVj71TXt8FBAjnl9YWWdqwGMU3Hjw==",
                            PhoneNumber = "09377507920",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a816ce8a-47f0-4b35-8009-114a582a0349",
                            TwoFactorEnabled = false,
                            UserName = "Sara@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7627cae6-e494-4f0a-bf9d-887060b1fa17",
                            CustomerId = 2,
                            Email = "Mohammad@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHAMMAD@GMAIL.COM",
                            NormalizedUserName = "MOHAMMAD@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHtmMXbixFY0oFt2PHbWYUpvw+59gmU6L6Hqn4Gic4WipB181n00Y4dwZakMoFIlcg==",
                            PhoneNumber = "09377507920",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6f0cedf-b7b1-47e5-b005-cb1a9bc22334",
                            TwoFactorEnabled = false,
                            UserName = "Mohammad@gmail.com"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3350),
                            Name = "آذربایجان شرقی"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3352),
                            Name = "آذربایجان غربی"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3354),
                            Name = "اردبیل"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3356),
                            Name = "اصفهان"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3358),
                            Name = "البرز"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3359),
                            Name = "ایلام"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3360),
                            Name = "بوشهر"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3362),
                            Name = "تهران"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3364),
                            Name = "چهارمحال و بختیاری"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3375),
                            Name = "خراسان جنوبی"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3377),
                            Name = "خراسان رضوی"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3395),
                            Name = "خراسان شمالی"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3397),
                            Name = "خوزستان"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3399),
                            Name = "زنجان"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3400),
                            Name = "سمنان"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3402),
                            Name = "سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3403),
                            Name = "فارس"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3405),
                            Name = "قزوین"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3407),
                            Name = "قم"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3408),
                            Name = "کردستان"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3410),
                            Name = "کرمان"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3411),
                            Name = "کرمانشاه"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3413),
                            Name = "کهگیلویه و بویراحمد"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3414),
                            Name = "گلستان"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3416),
                            Name = "گیلان"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3417),
                            Name = "لرستان"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3419),
                            Name = "مازندران"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3421),
                            Name = "مرکزی"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3422),
                            Name = "هرمزگان"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3424),
                            Name = "همدان"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(3425),
                            Name = "یزد"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 206, DateTimeKind.Local).AddTicks(8262),
                            CustomerId = 1,
                            Description = "کارش عالی بود",
                            ExpertId = 1,
                            IsAccept = false,
                            IsDeleted = false,
                            Score = 4,
                            Title = "عالی"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackUpPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("BankCardNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackUpPhoneNumber = "09123669858",
                            BankCardNumber = "1234123412341234",
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 207, DateTimeKind.Local).AddTicks(2049),
                            FirstName = "سحر",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "محمودی"
                        },
                        new
                        {
                            Id = 2,
                            BackUpPhoneNumber = "09123623258",
                            BankCardNumber = "1239684412341234",
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 207, DateTimeKind.Local).AddTicks(2087),
                            FirstName = "محمد",
                            Gender = 2,
                            IsDeleted = false,
                            LastName = "اصغری"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankCardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfrim")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankCardNumber = "1234123412341234",
                            BirthDate = new DateTime(1998, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 207, DateTimeKind.Local).AddTicks(9906),
                            FirstName = "علی",
                            Gender = 2,
                            IsConfrim = true,
                            IsDeleted = false,
                            LastName = "آموزگار",
                            PhoneNumber = "09362356998"
                        },
                        new
                        {
                            Id = 2,
                            BankCardNumber = "1234123412341255",
                            BirthDate = new DateTime(1998, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 207, DateTimeKind.Local).AddTicks(9911),
                            FirstName = "سارا",
                            Gender = 2,
                            IsConfrim = true,
                            IsDeleted = false,
                            LastName = "همتی",
                            PhoneNumber = "09362357998"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DoneAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpertId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 205, DateTimeKind.Local).AddTicks(9756),
                            CustomerId = 1,
                            Description = "نظافت خونه صد متری هب طور کامل",
                            DoneAt = new DateTime(2024, 5, 20, 22, 29, 36, 205, DateTimeKind.Local).AddTicks(9761),
                            ExpertId = 1,
                            IsDeleted = false,
                            RequestedAt = new DateTime(2024, 5, 20, 22, 29, 36, 205, DateTimeKind.Local).AddTicks(9767),
                            ServiceId = 1,
                            Status = 6,
                            Title = "نظافت"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ServiceSubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceSubCategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(3435),
                            IsDeleted = false,
                            Name = "سرویس عادی نظافت",
                            Price = 700000,
                            ServiceSubCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(3439),
                            IsDeleted = false,
                            Name = "سرویس لوکسن نظافت",
                            Price = 850000,
                            ServiceSubCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(3441),
                            IsDeleted = false,
                            Name = "سرویس ویژه نظافت",
                            Price = 1000000,
                            ServiceSubCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(3443),
                            IsDeleted = false,
                            Name = "تعمیر و سرویس کولر آبی",
                            Price = 200000,
                            ServiceSubCategoryId = 4
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(7477),
                            IsDeleted = false,
                            Name = "تمیزکاری"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(7480),
                            IsDeleted = false,
                            Name = "ساختمان"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(7482),
                            IsDeleted = false,
                            Name = "تعمیرات اشیاء"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(7483),
                            IsDeleted = false,
                            Name = "اسباب کشی و حمل بار"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(7485),
                            IsDeleted = false,
                            Name = "خودرو"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(7487),
                            IsDeleted = false,
                            Name = "سازمان ها و مجتمع ها"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(7489),
                            IsDeleted = false,
                            Name = "سلامت و زیبایی"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(7491),
                            IsDeleted = false,
                            Name = "کشکول"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.ServiceSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceSubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9324),
                            IsDeleted = false,
                            Name = "نظافت و پذیرایی",
                            ServiceCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9327),
                            IsDeleted = false,
                            Name = "شستشو",
                            ServiceCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9329),
                            IsDeleted = false,
                            Name = "کارواش و دیتیلینگ",
                            ServiceCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9331),
                            IsDeleted = false,
                            Name = "سرمایش و گرمایش",
                            ServiceCategoryId = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9333),
                            IsDeleted = false,
                            Name = "نصب وتعمیر لوازم خانگی",
                            ServiceCategoryId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9335),
                            IsDeleted = false,
                            Name = "کارواش و دیتیلینگ",
                            ServiceCategoryId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9337),
                            IsDeleted = false,
                            Name = "خذمات کامپیوتری",
                            ServiceCategoryId = 3
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9339),
                            IsDeleted = false,
                            Name = "تعمیرات موبایل",
                            ServiceCategoryId = 3
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9341),
                            IsDeleted = false,
                            Name = "سرمایش و گرمایش",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9343),
                            IsDeleted = false,
                            Name = "تعمیرا ساختمان",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9344),
                            IsDeleted = false,
                            Name = "لوله کشی",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9346),
                            IsDeleted = false,
                            Name = "طراحی و بازسازی ساختمان",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9348),
                            IsDeleted = false,
                            Name = "برق کاری",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9350),
                            IsDeleted = false,
                            Name = "چوب و کابینت",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9352),
                            IsDeleted = false,
                            Name = "خدمات شیشه ای ساختمان",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9353),
                            IsDeleted = false,
                            Name = "باغبانی و فضای سبز",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9355),
                            IsDeleted = false,
                            Name = "باربری و جا به جایی",
                            ServiceCategoryId = 4
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9357),
                            IsDeleted = false,
                            Name = "خدمات و تعمیرات خودرو",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9359),
                            IsDeleted = false,
                            Name = "کارواش و دیتیلینگ",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9360),
                            IsDeleted = false,
                            Name = "خدمات شرکتی",
                            ServiceCategoryId = 6
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9362),
                            IsDeleted = false,
                            Name = "زیبایی بانوان",
                            ServiceCategoryId = 7
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9364),
                            IsDeleted = false,
                            Name = "پیرایش و زیبایی آقایان",
                            ServiceCategoryId = 7
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9365),
                            IsDeleted = false,
                            Name = "پزشکی و پرستاری",
                            ServiceCategoryId = 7
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 5, 20, 22, 29, 36, 208, DateTimeKind.Local).AddTicks(9367),
                            IsDeleted = false,
                            Name = "حیوانات خانگی",
                            ServiceCategoryId = 7
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("OrderId");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExpertService", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Address", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.Entities.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HomeService.Domain.Core.Entities.Expert", "Expert")
                        .WithOne("Address")
                        .HasForeignKey("HomeService.Domain.Core.Entities.Address", "ExpertId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("City");

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.ApplicationUser", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("HomeService.Domain.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("HomeService.Domain.Core.Entities.Expert", "Expert")
                        .WithMany()
                        .HasForeignKey("ExpertId");

                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Comment", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.Entities.Expert", "Expert")
                        .WithMany("Comments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Order", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.Entities.Expert", "Expert")
                        .WithMany("Orders")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HomeService.Domain.Core.Entities.Service", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Service", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.ServiceSubCategory", "ServiceSubCategory")
                        .WithMany("Services")
                        .HasForeignKey("ServiceSubCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceSubCategory");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.ServiceSubCategory", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("ServiceSubCategories")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Suggestion", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Expert", "Expert")
                        .WithMany("Suggestions")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.Entities.Order", "Order")
                        .WithMany("Suggestions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.City", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Expert", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Order", b =>
                {
                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Service", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.ServiceCategory", b =>
                {
                    b.Navigation("ServiceSubCategories");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.ServiceSubCategory", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
